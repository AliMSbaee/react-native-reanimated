"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[442],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||l;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7990:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o={id:"useFrameCallback",title:"useFrameCallback",sidebar_label:"useFrameCallback"},i=void 0,c={unversionedId:"api/hooks/useFrameCallback",id:"api/hooks/useFrameCallback",isDocsHomePage:!1,title:"useFrameCallback",description:"This hook allows you to run a piece of code on every frame update.",source:"@site/docs/api/hooks/useFrameCallback.md",sourceDirName:"api/hooks",slug:"/api/hooks/useFrameCallback",permalink:"/react-native-reanimated/docs/next/api/hooks/useFrameCallback",version:"current",frontMatter:{id:"useFrameCallback",title:"useFrameCallback",sidebar_label:"useFrameCallback"},sidebar:"docs",previous:{title:"useEvent",permalink:"/react-native-reanimated/docs/next/api/hooks/useEvent"},next:{title:"useHandler",permalink:"/react-native-reanimated/docs/next/api/hooks/useHandler"}},u=[{value:"Arguments",id:"arguments",children:[]},{value:"Returns",id:"returns",children:[]},{value:"Types",id:"types",children:[]},{value:"Example",id:"example",children:[]}],s={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This hook allows you to run a piece of code on every frame update."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"useFrameCallback(updater: () => void, autostart: boolean = true) => [FrameCallback]\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("h4",{id:"callback-function"},(0,l.kt)("inlineCode",{parentName:"h4"},"callback")," ","[Function]"),(0,l.kt)("p",null,"Single worklet that will be called on every frame update without any arguments."),(0,l.kt)("h4",{id:"autostart-boolean"},(0,l.kt)("inlineCode",{parentName:"h4"},"autostart")," ","[boolean]"),(0,l.kt)("p",null,"Optional boolean that specifies if the callback should start running when\nregistration is complete. This argument defaults to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("h3",{id:"returns"},"Returns"),(0,l.kt)("p",null,"An object of type ",(0,l.kt)("inlineCode",{parentName:"p"},"FrameCallback")," which allows you to read and control the\ncallback state."),(0,l.kt)("h3",{id:"types"},"Types"),(0,l.kt)("h4",{id:"framecallback-object"},(0,l.kt)("inlineCode",{parentName:"h4"},"FrameCallback: [object]")),(0,l.kt)("p",null,"Properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"setActive: (isActive: boolean) => void"),": begins / stops listening for frame updates"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"isActive: boolean"),": indicates whether the callback is active (",(0,l.kt)("inlineCode",{parentName:"li"},"true"),")\nor not (",(0,l.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callbackId: number"),": a unique identifier of the callback function")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js",metastring:"{13-16}","{13-16}":!0},"import Animated, {\n  useAnimatedStyle,\n  useFrameCallback,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport {Button, View} from 'react-native';\n\nimport React from 'react';\n\nexport default function FrameCallbackExample() {\n  const x = useSharedValue(0);\n\n  const frameCallback = useFrameCallback(() => {\n    // Move the box by one pixel on every frame\n    x.value += 1;\n  }, false);\n\n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          translateX: x.value,\n        }\n      ],\n    };\n  });\n\n  return (\n    <View>\n      <Animated.View style={[styles.box, animatedStyle1]} />\n      <Button title={'Start/stop'} onPress={() => frameCallback.setActive(!frameCallback.isActive)}>\n    </View>\n  );\n}\n")))}p.isMDXComponent=!0}}]);