diff --git a/node_modules/react-native-screens/ios/RNSScreen.m b/node_modules/react-native-screens/ios/RNSScreen.m
index e0dd2ba..46837dd 100644
--- a/node_modules/react-native-screens/ios/RNSScreen.m
+++ b/node_modules/react-native-screens/ios/RNSScreen.m
@@ -706,6 +706,7 @@ - (void)viewDidDisappear:(BOOL)animated
   _shouldNotify = YES;
 
   [self traverseForScrollView:self.view];
+  [RNSSharedElementAnimator notifyAboutViewDidDisappear:self.view];
 }
 
 - (void)traverseForScrollView:(UIView *)view
@@ -747,9 +748,19 @@ - (void)setupProgressNotification
 {
   if (self.transitionCoordinator != nil) {
     _fakeView.alpha = 0.0;
-    NSMutableArray<NSArray *> *sharedElements = nil;
+    NSMutableArray<SharedElementConfig *> *sharedElements = nil;
     if (_closing) {
-      sharedElements = [RNSSharedElementAnimator prepareSharedElementsArrayForVC:self];
+      if (self == [self.transitionCoordinator viewControllerForKey:UITransitionContextToViewControllerKey]) {
+        UIViewController *anotherVC = [self.transitionCoordinator viewControllerForKey:UITransitionContextFromViewControllerKey];
+        sharedElements = [RNSSharedElementAnimator prepareSharedElementsArrayForVC:self anotherVC:anotherVC];
+      } else {
+        UIViewController *anotherVC = [self.transitionCoordinator viewControllerForKey:UITransitionContextToViewControllerKey];
+        sharedElements = [RNSSharedElementAnimator prepareSharedElementsArrayForVC:self anotherVC:anotherVC];
+      }
+      
+      [RNSScreen asignEndingValuesWithTransitionContext:self.transitionCoordinator
+                                         sharedElements:sharedElements
+                                           goingForward:self->_goingForward];
     }
 
     [self.transitionCoordinator
@@ -757,14 +768,12 @@ - (void)setupProgressNotification
           [[context containerView] addSubview:self->_fakeView];
           self->_fakeView.alpha = 1.0;
           if (self->_closing) {
-            for (NSArray *sharedElement in sharedElements) {
-              UIView *endingView = sharedElement[1];
+            // reverseObjectEnumerator to keep right z-index order, parent first, then childs
+            for (SharedElementConfig *sharedElement in sharedElements) {
+              UIView *startingView = sharedElement.fromView;
               // we add all views immediately, otherwise it won't work correctly
-              [[context containerView] addSubview:endingView];
+              [[context containerView] addSubview:startingView];
             }
-            [RNSScreen asignEndingValuesWithTransitionContext:context
-                                               sharedElements:sharedElements
-                                                 goingForward:self->_goingForward];
           }
 
           self->_animationTimer = [CADisplayLink displayLinkWithTarget:self selector:@selector(handleAnimation)];
@@ -792,8 +801,8 @@ - (void)notifyTransitionProgress:(double)progress closing:(BOOL)closing goingFor
   [((RNSScreenView *)self.view) notifyTransitionProgress:progress closing:closing goingForward:goingForward];
 }
 
-+ (void)asignEndingValuesWithTransitionContext:(id<UIViewControllerTransitionCoordinatorContext> _Nonnull)context
-                                sharedElements:(NSMutableArray<NSArray *> *)sharedElements
++ (void)asignEndingValuesWithTransitionContext:(id<UIViewControllerTransitionCoordinator> _Nonnull)context
+                                sharedElements:(NSMutableArray<SharedElementConfig *> *)sharedElements
                                   goingForward:(BOOL)goingForward
 {
   UIViewController *toViewController = [context viewControllerForKey:UITransitionContextToViewControllerKey];
@@ -812,43 +821,44 @@ + (void)asignEndingValuesWithTransitionContext:(id<UIViewControllerTransitionCoo
   while ([[lowestToVC childViewControllers] count] > 0) {
     lowestToVC = lowestToVC.childViewControllers[lowestToVC.childViewControllers.count - 1];
   }
-  for (NSArray *sharedElement in sharedElements) {
-    UIView *startingView = sharedElement[0];
-    UIView *endingViewParent = sharedElement[2];
-    UIView *endingView = sharedElement[1];
+  for (SharedElementConfig *sharedElement in sharedElements) {
+    UIView *startingView = sharedElement.fromView;
+    UIView *startingViewParent = sharedElement.fromContainer;
+    UIView *endingView = sharedElement.toView;
   
     [reaDelegate reanimatedMockTransitionWithConverterView:[context containerView]
                                                   fromView:startingView
-                                         fromViewConverter:startingView.superview
+                                         fromViewConverter:startingViewParent
                                                     toView:endingView
-                                           toViewConverter:endingViewParent
+                                           toViewConverter:endingView.superview
                                             transitionType:@"sharedElementTransition"];
   }
-  [reaDelegate reanimatedMockTransitionWithConverterView:[context containerView]
-                                                fromView:fromViewController.view
-                                       fromViewConverter:fromViewController.view
-                                                  toView:nil
-                                         toViewConverter:nil
-                                          transitionType:goingForward ? @"hiding" : @"exiting"];
-  [reaDelegate reanimatedMockTransitionWithConverterView:[context containerView]
-                                                fromView:toViewController.view
-                                       fromViewConverter:toViewController.view
-                                                  toView:nil
-                                         toViewConverter:nil
-                                          transitionType:goingForward ? @"entering" : @"reappearing"];
-}
-
-- (void)cleanupAfterTransitionWithSharedElements:(NSMutableArray<NSArray *> *)sharedElements
-{
-  for (NSArray *sharedElement in sharedElements) {
-    UIView *endingView = sharedElement[1];
-    [endingView removeFromSuperview];
-    UIView *endingContainer = sharedElement[2];
-    int index = [sharedElement[3] intValue];
-    [endingContainer insertSubview:endingView atIndex:index];
-    endingView.frame = [sharedElement[4] CGRectValue];
-    UIView *startingView = sharedElement[0];
-    startingView.hidden = NO;
+// TODO: screen transition animation
+//  [reaDelegate reanimatedMockTransitionWithConverterView:[context containerView]
+//                                                fromView:fromViewController.view
+//                                       fromViewConverter:fromViewController.view
+//                                                  toView:nil
+//                                         toViewConverter:nil
+//                                          transitionType:goingForward ? @"hiding" : @"exiting"];
+//  [reaDelegate reanimatedMockTransitionWithConverterView:[context containerView]
+//                                                fromView:toViewController.view
+//                                       fromViewConverter:toViewController.view
+//                                                  toView:nil
+//                                         toViewConverter:nil
+//                                          transitionType:goingForward ? @"entering" : @"reappearing"];
+}
+
+- (void)cleanupAfterTransitionWithSharedElements:(NSMutableArray<SharedElementConfig *> *)sharedElements
+{
+  for (SharedElementConfig *sharedElement in sharedElements) {
+      UIView *startingView = sharedElement.fromView; // sharedElement[0];
+      [startingView removeFromSuperview];
+      UIView *startContainer = sharedElement.fromContainer; // sharedElement[2];
+      int index = sharedElement.fromViewIndex; // [sharedElement[3] intValue];
+      [startContainer insertSubview:startingView atIndex:index];
+      startingView.frame = sharedElement.fromViewFrame; // [sharedElement[4] CGRectValue];
+      UIView *endingView = sharedElement.toView; // sharedElement[1];
+      endingView.hidden = NO;
   }
 
   [self->_animationTimer setPaused:YES];
diff --git a/node_modules/react-native-screens/ios/RNSSharedElementAnimator.h b/node_modules/react-native-screens/ios/RNSSharedElementAnimator.h
index 6f1d46c..e9c218e 100644
--- a/node_modules/react-native-screens/ios/RNSSharedElementAnimator.h
+++ b/node_modules/react-native-screens/ios/RNSSharedElementAnimator.h
@@ -1,11 +1,42 @@
+@interface SharedViewConfig: NSObject;
+
+- (void)setView:(UIView *)view;
+- (UIView *)getView;
+
+@property NSNumber *viewTag;
+@property BOOL toRemove;
+
+@end
+
+@interface SharedElementConfig : NSObject;
+
+@property UIView *fromView;
+@property UIView *toView;
+@property UIView *fromContainer;
+@property int fromViewIndex; 
+@property CGRect fromViewFrame;
+
+-(instancetype)initWithFromView:(UIView *)fromView 
+                         toView:(UIView *)toView 
+                  fromContainer:(UIView *)fromContainer
+                  fromViewFrame:(CGRect)fromViewFrame;
+
+@end
+
 @protocol RNSSharedElementTransitionsDelegate <NSObject>
 
+@property NSMutableDictionary<NSString *, NSMutableArray<SharedViewConfig *>*> * sharedTransitionsItems;
+@property NSMutableArray<NSString *> * iterationOrder;
+
+- (void)afterPreparingCallback;
 - (void)reanimatedMockTransitionWithConverterView:(UIView *)converter
                                          fromView:(UIView *)fromView
                                 fromViewConverter:(UIView *)startingViewConverter
                                            toView:(UIView *)toView
                                   toViewConverter:(UIView *)toViewConverter
                                    transitionType:(NSString *)transitionType;
+- (void)notifyAboutViewDidDisappear:(UIView *)screeen;
+- (void)makeSnapshot:(UIView *)view withViewController:(UIView *)viewController;
 
 @end
 
@@ -13,6 +44,7 @@
 
 + (void)setDelegate:(NSObject<RNSSharedElementTransitionsDelegate> *)delegate;
 + (NSObject<RNSSharedElementTransitionsDelegate> *)getDelegate;
-+ (NSMutableArray<NSArray *> *)prepareSharedElementsArrayForVC:(UIViewController *)vc;
++ (NSMutableArray<SharedElementConfig *> *)prepareSharedElementsArrayForVC:(UIViewController *)vc anotherVC:(UIViewController *)anotherVC;
++ (void)notifyAboutViewDidDisappear:(UIView *)screeen;
 
 @end
diff --git a/node_modules/react-native-screens/ios/RNSSharedElementAnimator.m b/node_modules/react-native-screens/ios/RNSSharedElementAnimator.m
index 4c82bf4..b78057b 100644
--- a/node_modules/react-native-screens/ios/RNSSharedElementAnimator.m
+++ b/node_modules/react-native-screens/ios/RNSSharedElementAnimator.m
@@ -3,6 +3,25 @@
 
 #import <React/RCTUIManager.h>
 
+@implementation SharedElementConfig 
+
+-(instancetype)initWithFromView:(UIView *)fromView 
+                         toView:(UIView *)toView 
+                  fromContainer:(UIView *)fromContainer
+                  fromViewFrame:(CGRect)fromViewFrame
+{
+  if (self = [super init]) {
+    _fromView = fromView;
+    _toView = toView;
+    _fromContainer = fromContainer;
+    _fromViewFrame = fromViewFrame;
+  }
+
+  return self;
+}
+
+@end
+
 @implementation RNSSharedElementAnimator
 
 static NSObject<RNSSharedElementTransitionsDelegate> *_delegate;
@@ -17,26 +36,47 @@ + (void)setDelegate:(NSObject<RNSSharedElementTransitionsDelegate> *)delegate
   return _delegate;
 }
 
-+ (NSMutableArray<NSArray *> *)prepareSharedElementsArrayForVC:(UIViewController *)vc
++ (NSMutableArray<SharedElementConfig *> *)prepareSharedElementsArrayForVC:(UIViewController *)viewController anotherVC:(UIViewController *)anotherViewController
 {
-  NSMutableArray<NSArray *> *sharedElementsArray = [NSMutableArray new];
+  NSMutableArray<SharedElementConfig *> *sharedElementsArray = [NSMutableArray new];
 
-  NSArray<__kindof UIViewController *> *viewControllers = vc.navigationController.viewControllers;
-  RNSScreenView *screenView = (RNSScreenView *)vc.view;
+  NSArray<__kindof UIViewController *> *viewControllers = viewController.navigationController.viewControllers;
+  RNSScreenView *screenView = (RNSScreenView *)viewController.view;
 
-  for (NSDictionary *sharedElementDict in screenView.sharedElements) {
-    UIView *fromView = [[screenView bridge].uiManager viewForNativeID:sharedElementDict[@"fromID"]
-                                                          withRootTag:[screenView rootTag]];
-    UIView *toView = [[screenView bridge].uiManager viewForNativeID:sharedElementDict[@"toID"]
-                                                        withRootTag:[screenView rootTag]];
+  RCTUIManager *uiManager = [screenView bridge].uiManager;
+  NSNumber *rootTag = [screenView rootTag];
+  for (NSString *key in [_delegate.iterationOrder reverseObjectEnumerator]) {
+    NSArray<SharedViewConfig *> *sharedViewConfigs = _delegate.sharedTransitionsItems[key];
+    UIView *fromView, *toView;
+    for (SharedViewConfig *sharedViewConfig in sharedViewConfigs) {
+      UIView *view = [uiManager viewForReactTag:sharedViewConfig.viewTag];
+      if (view == nil) {
+        view = [sharedViewConfig getView];
+      }
+      else {
+        [sharedViewConfig setView:view];
+      }
+      UIViewController *viewConstroller = [view reactViewController];
+      BOOL isUnderViewController = (viewConstroller == viewController || viewConstroller == anotherViewController);
+      if (fromView == nil && isUnderViewController) {
+        fromView = view;
+        continue;
+      }
+      if (fromView != nil && isUnderViewController) {
+        toView = view;
+        break;
+      }
+    }
 
-    if (fromView == nil || toView == nil) {
-      break;
+    BOOL isAnyNull = fromView == nil || toView == nil;
+    BOOL hasCorrectRootTag = [fromView rootTag] == rootTag && [toView rootTag] == rootTag;
+    if (isAnyNull || !hasCorrectRootTag) {
+      continue;
     }
 
     UIView *start;
     UIView *end;
-    if ([viewControllers containsObject:vc]) {
+    if ([viewControllers containsObject:viewController]) {
       // we are in previous vc and going forward
       start = fromView;
       end = toView;
@@ -46,19 +86,43 @@ + (void)setDelegate:(NSObject<RNSSharedElementTransitionsDelegate> *)delegate
       end = fromView;
     }
 
-    // we reparent starting view and animate it, then reparent it back after the transition
-    UIView *endContainer = end.reactSuperview;
-    int endIndex = (int)[[endContainer reactSubviews] indexOfObject:end];
-    CGRect endFrame = end.frame;
-    [end removeFromSuperview];
+      UIView *startContainer = start.reactSuperview;
+      CGRect startFrame = start.frame;
       
-    start.hidden = YES;
-    if (start != nil && end != nil) {
-      [sharedElementsArray addObject:@[ start, end, endContainer, @(endIndex), @(endFrame) ]];
-    }
+      SharedElementConfig *sharedElementConfig = [
+        [SharedElementConfig alloc] 
+          initWithFromView:start
+                    toView:end
+             fromContainer:startContainer
+             fromViewFrame:startFrame
+      ];
+      if (start != nil && end != nil) {
+        [sharedElementsArray addObject:sharedElementConfig];
+      }
+  }
+  
+  // we reparent starting view and animate it, then reparent it back after the transition
+  for (SharedElementConfig *sharedElementConfig in sharedElementsArray) {
+    UIView *start = sharedElementConfig.fromView;
+    UIView *end = sharedElementConfig.toView;
+    [_delegate makeSnapshot:start withViewController:sharedElementConfig.fromContainer];
+    [_delegate makeSnapshot:end withViewController:end.superview];
+    
+    UIView *startContainer = start.reactSuperview;
+    int startIndex = (int)[[startContainer reactSubviews] indexOfObject:start];
+    [start removeFromSuperview];
+    end.hidden = YES;
+    sharedElementConfig.fromViewIndex = startIndex;
   }
   
+  [_delegate afterPreparingCallback];
+
   return sharedElementsArray;
 }
 
++ (void)notifyAboutViewDidDisappear:(UIView *)screeen 
+{
+  [_delegate notifyAboutViewDidDisappear:screeen];
+}
+
 @end
diff --git a/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx b/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx
index d0aa06b..1606d86 100644
--- a/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx
+++ b/node_modules/react-native-screens/src/native-stack/views/NativeStackView.tsx
@@ -157,7 +157,6 @@ const RouteView = ({
     nativeBackButtonDismissalEnabled = false,
     replaceAnimation = 'pop',
     screenOrientation,
-    sharedElements,
     stackAnimation,
     statusBarAnimation,
     statusBarColor,
@@ -209,7 +208,6 @@ const RouteView = ({
       nativeBackButtonDismissalEnabled={nativeBackButtonDismissalEnabled}
       replaceAnimation={replaceAnimation}
       screenOrientation={screenOrientation}
-      sharedElements={sharedElements}
       stackAnimation={stackAnimation}
       stackPresentation={stackPresentation}
       statusBarAnimation={statusBarAnimation}
